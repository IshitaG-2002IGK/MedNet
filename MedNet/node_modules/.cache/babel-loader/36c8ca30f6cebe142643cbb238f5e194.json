{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoiceCheckbox = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar utils_1 = require(\"../utils\");\n\nvar VoiceCheckbox = function (_a) {\n  var label = _a.label,\n      value = _a.value,\n      defaultValue = _a.defaultValue,\n      intent = _a.intent,\n      clearIntent = _a.clearIntent,\n      setOnEntityType = _a.setOnEntityType,\n      clearOnEntityType = _a.clearOnEntityType,\n      onChange = _a.onChange,\n      onFinal = _a.onFinal,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      _b = _a.focused,\n      focused = _b === void 0 ? true : _b;\n  var inputEl = react_1.useRef(null);\n\n  var _c = react_1.useState(focused),\n      _focused = _c[0],\n      _setFocused = _c[1];\n\n  var _d = react_1.useState(defaultValue !== undefined ? defaultValue : false),\n      _value = _d[0],\n      _setValue = _d[1];\n\n  var _e = react_1.useState(defaultValue !== undefined ? defaultValue : false),\n      _lastGoodKnownValue = _e[0],\n      _setLastGoodKnownValue = _e[1];\n\n  var _f = react_1.useState(undefined),\n      lastSegmentId = _f[0],\n      setLastSegmentId = _f[1];\n\n  var segment = react_client_1.useSpeechContext().segment;\n\n  var _onChange = function (newValue) {\n    _setValue(newValue);\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  var _onFocus = function () {\n    _setFocused(true); // use callback only to change parent state\n\n\n    if (!focused && onFocus) {\n      onFocus();\n    }\n  };\n\n  var _onBlur = function () {\n    // use callback only to change parent state\n    if (_focused) {\n      _setFocused(false);\n\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  };\n\n  react_1.useEffect(function () {\n    if (focused && !_focused && inputEl != null && inputEl.current != null) {\n      inputEl.current.focus();\n    }\n  }, [focused]);\n  react_1.useEffect(function () {\n    if (segment) {\n      var newValue = null;\n      var lastGoodKnownValue = _lastGoodKnownValue; // Update last good known value at new segment start\n\n      var segmentId = segment.contextId + \"/\" + segment.id;\n\n      if (segmentId !== lastSegmentId) {\n        setLastSegmentId(segmentId);\n        lastGoodKnownValue = value || _value;\n\n        _setLastGoodKnownValue(lastGoodKnownValue);\n      } // Define newValue if the segment contains input targeted to this component\n\n\n      var clear = clearIntent && segment.intent.intent === clearIntent;\n      var set = !clear && (!intent || segment.intent.intent === intent);\n\n      if (set || clear) {\n        var entities = utils_1.formatEntities(segment.entities);\n\n        if (entities[setOnEntityType] !== undefined) {\n          newValue = set;\n        } else if (clearOnEntityType && entities[clearOnEntityType] !== undefined) {\n          newValue = false;\n        }\n      } // _onChange to newValue only only if defined: tentative input may retarget to another component at any time\n      // otherwise reset to last good known value\n\n\n      _onChange(newValue !== null ? newValue : lastGoodKnownValue);\n\n      if (segment === null || segment === void 0 ? void 0 : segment.isFinal) {\n        if (inputEl != null && inputEl.current != null) {\n          inputEl.current.blur();\n        }\n\n        if (onFinal) {\n          onFinal();\n        }\n      }\n    }\n  }, [segment]);\n  return react_1.default.createElement(\"div\", {\n    className: \"widgetGroup checkbox\"\n  }, react_1.default.createElement(\"input\", {\n    type: \"checkbox\",\n    checked: value !== undefined ? value : _value,\n    onChange: function (event) {\n      _onChange(event.target.checked);\n    }\n  }), react_1.default.createElement(\"label\", null, label));\n};\n\nexports.VoiceCheckbox = VoiceCheckbox;","map":{"version":3,"sources":["../../src/components/VoiceCheckbox.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VoiceCheckbox = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_client_1 = require(\"@speechly/react-client\");\nvar utils_1 = require(\"../utils\");\nvar VoiceCheckbox = function (_a) {\n    var label = _a.label, value = _a.value, defaultValue = _a.defaultValue, intent = _a.intent, clearIntent = _a.clearIntent, setOnEntityType = _a.setOnEntityType, clearOnEntityType = _a.clearOnEntityType, onChange = _a.onChange, onFinal = _a.onFinal, onBlur = _a.onBlur, onFocus = _a.onFocus, _b = _a.focused, focused = _b === void 0 ? true : _b;\n    var inputEl = react_1.useRef(null);\n    var _c = react_1.useState(focused), _focused = _c[0], _setFocused = _c[1];\n    var _d = react_1.useState(defaultValue !== undefined ? defaultValue : false), _value = _d[0], _setValue = _d[1];\n    var _e = react_1.useState(defaultValue !== undefined ? defaultValue : false), _lastGoodKnownValue = _e[0], _setLastGoodKnownValue = _e[1];\n    var _f = react_1.useState(undefined), lastSegmentId = _f[0], setLastSegmentId = _f[1];\n    var segment = react_client_1.useSpeechContext().segment;\n    var _onChange = function (newValue) {\n        _setValue(newValue);\n        if (onChange) {\n            onChange(newValue);\n        }\n    };\n    var _onFocus = function () {\n        _setFocused(true);\n        // use callback only to change parent state\n        if (!focused && onFocus) {\n            onFocus();\n        }\n    };\n    var _onBlur = function () {\n        // use callback only to change parent state\n        if (_focused) {\n            _setFocused(false);\n            if (onBlur) {\n                onBlur();\n            }\n        }\n    };\n    react_1.useEffect(function () {\n        if (focused && !_focused && inputEl != null && inputEl.current != null) {\n            inputEl.current.focus();\n        }\n    }, [focused]);\n    react_1.useEffect(function () {\n        if (segment) {\n            var newValue = null;\n            var lastGoodKnownValue = _lastGoodKnownValue;\n            // Update last good known value at new segment start\n            var segmentId = segment.contextId + \"/\" + segment.id;\n            if (segmentId !== lastSegmentId) {\n                setLastSegmentId(segmentId);\n                lastGoodKnownValue = value || _value;\n                _setLastGoodKnownValue(lastGoodKnownValue);\n            }\n            // Define newValue if the segment contains input targeted to this component\n            var clear = clearIntent && segment.intent.intent === clearIntent;\n            var set = !clear && (!intent || segment.intent.intent === intent);\n            if (set || clear) {\n                var entities = utils_1.formatEntities(segment.entities);\n                if (entities[setOnEntityType] !== undefined) {\n                    newValue = set;\n                }\n                else if (clearOnEntityType && entities[clearOnEntityType] !== undefined) {\n                    newValue = false;\n                }\n            }\n            // _onChange to newValue only only if defined: tentative input may retarget to another component at any time\n            // otherwise reset to last good known value\n            _onChange(newValue !== null ? newValue : lastGoodKnownValue);\n            if (segment === null || segment === void 0 ? void 0 : segment.isFinal) {\n                if (inputEl != null && inputEl.current != null) {\n                    inputEl.current.blur();\n                }\n                if (onFinal) {\n                    onFinal();\n                }\n            }\n        }\n    }, [segment]);\n    return (react_1.default.createElement(\"div\", { className: \"widgetGroup checkbox\" },\n        react_1.default.createElement(\"input\", { type: \"checkbox\", checked: value !== undefined ? value : _value, onChange: function (event) { _onChange(event.target.checked); } }),\n        react_1.default.createElement(\"label\", null, label)));\n};\nexports.VoiceCheckbox = VoiceCheckbox;\n//# sourceMappingURL=VoiceCheckbox.js.map"]},"metadata":{},"sourceType":"script"}