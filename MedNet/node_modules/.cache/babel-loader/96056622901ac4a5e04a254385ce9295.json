{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VoiceSelect = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_client_1 = require(\"@speechly/react-client\");\n\nvar VoiceSelect = function (_a) {\n  var label = _a.label,\n      options = _a.options,\n      displayNames = _a.displayNames,\n      value = _a.value,\n      defaultValue = _a.defaultValue,\n      changeOnIntent = _a.changeOnIntent,\n      changeOnEntityType = _a.changeOnEntityType,\n      changeOnEntityValue = _a.changeOnEntityValue,\n      onChange = _a.onChange,\n      onFinal = _a.onFinal,\n      onBlur = _a.onBlur,\n      onFocus = _a.onFocus,\n      _b = _a.focused,\n      focused = _b === void 0 ? true : _b;\n  var inputEl = react_1.useRef(null);\n\n  var _c = react_1.useState([]),\n      matchesInUpperCase = _c[0],\n      setMatchesInUpperCase = _c[1];\n\n  var _d = react_1.useState(focused),\n      _focused = _d[0],\n      _setFocused = _d[1];\n\n  var _e = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''),\n      _value = _e[0],\n      _setValue = _e[1];\n\n  var _f = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''),\n      _lastGoodKnownValue = _f[0],\n      _setLastGoodKnownValue = _f[1];\n\n  var _g = react_1.useState(undefined),\n      lastSegmentId = _g[0],\n      setLastSegmentId = _g[1];\n\n  var segment = react_client_1.useSpeechContext().segment;\n\n  var _onChange = function (newValue) {\n    _setValue(newValue);\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  var _onFocus = function () {\n    _setFocused(true); // use callback only to change parent state\n\n\n    if (!focused && onFocus) {\n      onFocus();\n    }\n  };\n\n  var _onBlur = function () {\n    // use callback only to change parent state\n    if (_focused) {\n      _setFocused(false);\n\n      if (onBlur) {\n        onBlur();\n      }\n    }\n  };\n\n  react_1.useEffect(function () {\n    if (focused && !_focused && inputEl != null && inputEl.current != null) {\n      inputEl.current.focus();\n    }\n  }, [focused]);\n  react_1.useEffect(function () {\n    var effectiveOptions;\n\n    if (Array.isArray(changeOnIntent)) {\n      effectiveOptions = changeOnIntent;\n    } else if (Array.isArray(changeOnEntityType)) {\n      effectiveOptions = changeOnEntityType;\n    } else if (Array.isArray(changeOnEntityValue)) {\n      effectiveOptions = changeOnEntityValue;\n    } else {\n      effectiveOptions = options;\n    }\n\n    setMatchesInUpperCase(effectiveOptions.map(function (option) {\n      return option.toUpperCase();\n    }));\n  }, [options, changeOnIntent, changeOnEntityType, changeOnEntityValue]);\n  react_1.useEffect(function () {\n    if (segment) {\n      var newValue_1 = null;\n      var lastGoodKnownValue = _lastGoodKnownValue; // Update last good known value at new segment start\n\n      var segmentId = segment.contextId + \"/\" + segment.id;\n\n      if (segmentId !== lastSegmentId) {\n        setLastSegmentId(segmentId);\n        lastGoodKnownValue = value || _value;\n\n        _setLastGoodKnownValue(lastGoodKnownValue);\n      } // Define newValue if the segment contains input targeted to this component\n\n\n      var candidates = void 0;\n\n      if (Array.isArray(changeOnIntent)) {\n        candidates = [segment.intent.intent];\n      } else {\n        // React if no intent defined; or a specified intent is defined\n        if (!changeOnIntent || segment.intent.intent === changeOnIntent) {\n          if (Array.isArray(changeOnEntityType)) {\n            candidates = segment.entities.map(function (entity) {\n              return entity.type;\n            });\n          } else {\n            candidates = segment.entities.filter(function (entity) {\n              return entity.type === changeOnEntityType;\n            }).map(function (entity) {\n              return entity.value;\n            });\n          }\n        }\n      }\n\n      if (candidates && candidates.length > 0) {\n        // Match by each candidate against the match values\n        candidates.forEach(function (candidateName) {\n          var index = matchesInUpperCase.findIndex(function (option) {\n            return option === candidateName.toUpperCase();\n          });\n\n          if (index >= 0) {\n            newValue_1 = options[index];\n          }\n        });\n      } // _onChange to newValue only only if defined: tentative input may retarget to another component at any time\n      // otherwise reset to last good known value\n\n\n      _onChange(newValue_1 !== null ? newValue_1 : lastGoodKnownValue);\n\n      if (segment.isFinal) {\n        if (inputEl != null && inputEl.current != null) {\n          inputEl.current.blur();\n        }\n\n        if (onFinal) {\n          onFinal();\n        }\n      }\n    }\n  }, [segment]);\n  return react_1.default.createElement(\"div\", {\n    ref: inputEl,\n    className: \"widgetGroup select\"\n  }, react_1.default.createElement(\"label\", null, label), react_1.default.createElement(\"select\", {\n    value: value || _value,\n    onChange: function (event) {\n      _onChange(event.target.value);\n    },\n    onBlur: _onBlur,\n    onFocus: _onFocus\n  }, options.map(function (optionValue, index) {\n    return react_1.default.createElement(\"option\", {\n      key: optionValue,\n      value: optionValue\n    }, displayNames && displayNames[index] ? displayNames[index] : optionValue);\n  })));\n};\n\nexports.VoiceSelect = VoiceSelect;","map":{"version":3,"sources":["../../src/components/VoiceSelect.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.VoiceSelect = void 0;\nvar react_1 = __importStar(require(\"react\"));\nvar react_client_1 = require(\"@speechly/react-client\");\nvar VoiceSelect = function (_a) {\n    var label = _a.label, options = _a.options, displayNames = _a.displayNames, value = _a.value, defaultValue = _a.defaultValue, changeOnIntent = _a.changeOnIntent, changeOnEntityType = _a.changeOnEntityType, changeOnEntityValue = _a.changeOnEntityValue, onChange = _a.onChange, onFinal = _a.onFinal, onBlur = _a.onBlur, onFocus = _a.onFocus, _b = _a.focused, focused = _b === void 0 ? true : _b;\n    var inputEl = react_1.useRef(null);\n    var _c = react_1.useState([]), matchesInUpperCase = _c[0], setMatchesInUpperCase = _c[1];\n    var _d = react_1.useState(focused), _focused = _d[0], _setFocused = _d[1];\n    var _e = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''), _value = _e[0], _setValue = _e[1];\n    var _f = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''), _lastGoodKnownValue = _f[0], _setLastGoodKnownValue = _f[1];\n    var _g = react_1.useState(undefined), lastSegmentId = _g[0], setLastSegmentId = _g[1];\n    var segment = react_client_1.useSpeechContext().segment;\n    var _onChange = function (newValue) {\n        _setValue(newValue);\n        if (onChange) {\n            onChange(newValue);\n        }\n    };\n    var _onFocus = function () {\n        _setFocused(true);\n        // use callback only to change parent state\n        if (!focused && onFocus) {\n            onFocus();\n        }\n    };\n    var _onBlur = function () {\n        // use callback only to change parent state\n        if (_focused) {\n            _setFocused(false);\n            if (onBlur) {\n                onBlur();\n            }\n        }\n    };\n    react_1.useEffect(function () {\n        if (focused && !_focused && inputEl != null && inputEl.current != null) {\n            inputEl.current.focus();\n        }\n    }, [focused]);\n    react_1.useEffect(function () {\n        var effectiveOptions;\n        if (Array.isArray(changeOnIntent)) {\n            effectiveOptions = changeOnIntent;\n        }\n        else if (Array.isArray(changeOnEntityType)) {\n            effectiveOptions = changeOnEntityType;\n        }\n        else if (Array.isArray(changeOnEntityValue)) {\n            effectiveOptions = changeOnEntityValue;\n        }\n        else {\n            effectiveOptions = options;\n        }\n        setMatchesInUpperCase(effectiveOptions.map(function (option) { return option.toUpperCase(); }));\n    }, [options, changeOnIntent, changeOnEntityType, changeOnEntityValue]);\n    react_1.useEffect(function () {\n        if (segment) {\n            var newValue_1 = null;\n            var lastGoodKnownValue = _lastGoodKnownValue;\n            // Update last good known value at new segment start\n            var segmentId = segment.contextId + \"/\" + segment.id;\n            if (segmentId !== lastSegmentId) {\n                setLastSegmentId(segmentId);\n                lastGoodKnownValue = value || _value;\n                _setLastGoodKnownValue(lastGoodKnownValue);\n            }\n            // Define newValue if the segment contains input targeted to this component\n            var candidates = void 0;\n            if (Array.isArray(changeOnIntent)) {\n                candidates = [segment.intent.intent];\n            }\n            else {\n                // React if no intent defined; or a specified intent is defined\n                if (!changeOnIntent || segment.intent.intent === changeOnIntent) {\n                    if (Array.isArray(changeOnEntityType)) {\n                        candidates = segment.entities.map(function (entity) { return entity.type; });\n                    }\n                    else {\n                        candidates = segment.entities.filter(function (entity) { return entity.type === changeOnEntityType; }).map(function (entity) { return entity.value; });\n                    }\n                }\n            }\n            if (candidates && candidates.length > 0) {\n                // Match by each candidate against the match values\n                candidates.forEach(function (candidateName) {\n                    var index = matchesInUpperCase.findIndex(function (option) { return option === candidateName.toUpperCase(); });\n                    if (index >= 0) {\n                        newValue_1 = options[index];\n                    }\n                });\n            }\n            // _onChange to newValue only only if defined: tentative input may retarget to another component at any time\n            // otherwise reset to last good known value\n            _onChange(newValue_1 !== null ? newValue_1 : lastGoodKnownValue);\n            if (segment.isFinal) {\n                if (inputEl != null && inputEl.current != null) {\n                    inputEl.current.blur();\n                }\n                if (onFinal) {\n                    onFinal();\n                }\n            }\n        }\n    }, [segment]);\n    return (react_1.default.createElement(\"div\", { ref: inputEl, className: \"widgetGroup select\" },\n        react_1.default.createElement(\"label\", null, label),\n        react_1.default.createElement(\"select\", { value: value || _value, onChange: function (event) { _onChange(event.target.value); }, onBlur: _onBlur, onFocus: _onFocus }, options.map(function (optionValue, index) {\n            return react_1.default.createElement(\"option\", { key: optionValue, value: optionValue }, displayNames && displayNames[index] ? displayNames[index] : optionValue);\n        }))));\n};\nexports.VoiceSelect = VoiceSelect;\n//# sourceMappingURL=VoiceSelect.js.map"]},"metadata":{},"sourceType":"script"}