/// <reference types="react" />
export declare type VoiceToggleProps = {
    /**
     * Options presented by this widget. The selected option is returned by `onChange`.
     */
    options: string[];
    /**
     * Human-friendly display names for each option.
     */
    displayNames?: string[];
    /**
     * The current option. Must match a `options` value. Provide an `onChange` handler to react to changes.
     */
    value?: string;
    /**
      * Initially selected option. Has no effect if `value` is specified.
      */
    defaultValue?: string;
    /**
     * `string[]` (intents) changes this widget's option based on the intent of the SpeechSegment. The order must match that of `options`.
     * `string` (intent) filters out all but the specified intent. Use `changeOnEntityType` or `changeOnEntityValue` to change the option.
     * `undefined` disables intent filtering.
     */
    changeOnIntent?: string | string[];
    /**
     * `string[]` (entity types) changes this widget's option if a matched entity type is found in the SpeechSegment. The order must match that of `options`.
     * `string` (intent) filters out all but the specified entity type. Use `changeOnEntityValue` to change the option.
     * `undefined` disables entity type filtering.
     */
    changeOnEntityType?: string | string[];
    /**
     * `string[]` (entity values) changes this widget's option if a matched entity value is found in the SpeechSegment. The order must match that of `options`.
     */
    changeOnEntityValue?: string[];
    /**
     * @private
     */
    focused?: boolean;
    /**
     * @param value The option for the selected item.
     * Triggered upon GUI or voice manipulation of the widget.
     */
    onChange?: (value: string) => void;
    /**
     * @private
     */
    onBlur?: () => void;
    /**
     * @private
     */
    onFocus?: () => void;
    /**
     * @private
     */
    onFinal?: () => void;
};
export declare const VoiceToggle: ({ changeOnIntent, changeOnEntityType, changeOnEntityValue, options, displayNames, value, defaultValue, onChange, onFinal, onBlur, onFocus, focused }: VoiceToggleProps) => JSX.Element;
