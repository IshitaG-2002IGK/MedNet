"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoiceInput = void 0;
var react_1 = __importStar(require("react"));
var react_client_1 = require("@speechly/react-client");
var utils_1 = require("../utils");
var VoiceInput = function (_a) {
    var label = _a.label, value = _a.value, changeOnIntent = _a.changeOnIntent, changeOnEntityType = _a.changeOnEntityType, defaultValue = _a.defaultValue, onChange = _a.onChange, onFinal = _a.onFinal, onBlur = _a.onBlur, onFocus = _a.onFocus, _b = _a.focused, focused = _b === void 0 ? true : _b;
    var inputEl = react_1.useRef(null);
    var _c = react_1.useState(focused), _focused = _c[0], _setFocused = _c[1];
    var _d = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''), _value = _d[0], _setValue = _d[1];
    var _e = react_1.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : ''), _lastGoodKnownValue = _e[0], _setLastGoodKnownValue = _e[1];
    var _f = react_1.useState(undefined), lastSegmentId = _f[0], setLastSegmentId = _f[1];
    var segment = react_client_1.useSpeechContext().segment;
    var _onChange = function (newValue) {
        _setValue(newValue);
        if (onChange) {
            onChange(newValue);
        }
    };
    var _onFocus = function () {
        _setFocused(true);
        // use callback only to change parent state
        if (!focused && onFocus) {
            onFocus();
        }
    };
    var _onBlur = function () {
        // use callback only to change parent state
        if (_focused) {
            _setFocused(false);
            if (onBlur) {
                onBlur();
            }
        }
    };
    react_1.useEffect(function () {
        if (focused && !_focused && inputEl != null && inputEl.current != null) {
            inputEl.current.focus();
        }
    }, [focused]);
    react_1.useEffect(function () {
        if (segment) {
            var newValue = null;
            var lastGoodKnownValue = _lastGoodKnownValue;
            // Update last good known value at new segment start
            var segmentId = segment.contextId + "/" + segment.id;
            if (segmentId !== lastSegmentId) {
                setLastSegmentId(segmentId);
                lastGoodKnownValue = value || _value;
                _setLastGoodKnownValue(lastGoodKnownValue);
            }
            // Define newValue if the segment contains input targeted to this component
            if (!changeOnIntent || segment.intent.intent === changeOnIntent) {
                var entities = utils_1.formatEntities(segment.entities);
                if (entities[changeOnEntityType] !== undefined) {
                    newValue = entities[changeOnEntityType];
                }
            }
            // _onChange to newValue only only if defined: tentative input may retarget to another component at any time
            // otherwise reset to last good known value
            _onChange(newValue !== null ? newValue : lastGoodKnownValue);
            if (segment === null || segment === void 0 ? void 0 : segment.isFinal) {
                if (inputEl != null && inputEl.current != null) {
                    inputEl.current.blur();
                }
                if (onFinal) {
                    onFinal();
                }
            }
        }
    }, [segment]);
    return (react_1.default.createElement("div", { className: "widgetGroup inputText" },
        react_1.default.createElement("label", null, label),
        react_1.default.createElement("input", { ref: inputEl, type: "text", name: changeOnEntityType, value: value || _value, onChange: function (event) { _onChange(event.target.value); }, onBlur: _onBlur, onFocus: _onFocus })));
};
exports.VoiceInput = VoiceInput;
//# sourceMappingURL=VoiceInput.js.map