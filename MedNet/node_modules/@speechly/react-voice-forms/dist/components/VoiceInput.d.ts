/// <reference types="react" />
export declare type VoiceInputProps = {
    /**
     * The label displayed on the component. For speech use, the label should match the keywords in the phrase used to control the widget:
     * e.g. component with label "Passengers" should be configured to react to phrases like "3 passegers"
     */
    label: string;
    /**
     * The current value. Specifying the value controls the components's state so it makes sense to provide an onChange handler.
     */
    value?: string;
    /**
     * Initial value. Has no effect if `value` is specified.
     */
    defaultValue?: string;
    /**
     * `string` (intent) filters out all but the specified intent.
     * `undefined` disables intent filtering.
     */
    changeOnIntent?: string;
    /**
      * `string` (entity type) specifies the entity type that changes this component's value. The new value will be the entity's value.
      */
    changeOnEntityType: string;
    /**
     * @private
     */
    focused?: boolean;
    /**
    * @param value The new value.
    * Triggered upon GUI or voice manipulation of the widget.
    */
    onChange?: (value: string) => void;
    /**
     * @private
     */
    onBlur?: () => void;
    /**
     * @private
     */
    onFocus?: () => void;
    /**
     * @private
     */
    onFinal?: () => void;
};
export declare const VoiceInput: ({ label, value, changeOnIntent, changeOnEntityType, defaultValue, onChange, onFinal, onBlur, onFocus, focused }: VoiceInputProps) => JSX.Element;
