/// <reference types="react" />
/**
 * Properties for VoiceSelect component.
 *
 * @public
 */
export declare type VoiceSelectProps = {
    /**
     * The label displayed on the component. For speech use, the label should match the keywords in the phrase used to control the widget:
     * e.g. component with label "Passengers" should be configured to react to phrases like "3 passegers"
     */
    label: string;
    /**
     * Array of option id strings. The selected id is returned by onChange.
     * By default, the values of the options array is used as `changeOnEntityType` if not one of `changeOnIntent`, changeOnEntityType nor changeOnEntityValue specifies an array value.
     */
    options: string[];
    /**
     * Array of human-friendly display names for each option
     */
    displayNames?: string[];
    /**
     * The current option. Specifying the value controls the components's state so it makes sense to provide an onChange handler.
     */
    value?: string;
    /**
     * Initially selected option. Has no effect if `value` is specified.
     */
    defaultValue?: string;
    /**
     * `string[]` (intents) changes this widget's option based on the intent of the SpeechSegment. The order must match that of `options`.
     * `string` (intent) filters out all but the specified intent. Use `changeOnEntityType` or `changeOnEntityValue` to change the option.
     * `undefined` disables intent filtering.
     */
    changeOnIntent?: string | string[];
    /**
     * `string[]` (entity types) changes this widget's option if a matched entity type is found in the SpeechSegment. The order must match that of `options`.
     * `string` (intent) filters out all but the specified entity type. Use `changeOnEntityValue` to change the option.
     * `undefined` disables entity type filtering.
     */
    changeOnEntityType?: string | string[];
    /**
     * `string[]` (entity values) changes this widget's option if a matched entity value is found in the SpeechSegment. The order must match that of `options`.
     */
    changeOnEntityValue?: string[];
    /**
     * @private
     */
    focused?: boolean;
    /**
     * @param value The option for the selected item.
     * Triggered upon GUI or voice manipulation of the widget.
     */
    onChange?: (value: string) => void;
    /**
     * @private
     */
    onBlur?: () => void;
    /**
     * @private
     */
    onFocus?: () => void;
    /**
     * @private
     */
    onFinal?: () => void;
};
export declare const VoiceSelect: ({ label, options, displayNames, value, defaultValue, changeOnIntent, changeOnEntityType, changeOnEntityValue, onChange, onFinal, onBlur, onFocus, focused }: VoiceSelectProps) => JSX.Element;
