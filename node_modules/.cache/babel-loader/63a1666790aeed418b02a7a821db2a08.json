{"ast":null,"code":"var identity = require('./identity');\n\nvar prop = require('./prop');\n\nvar deepMatches = require('../object/deepMatches');\n/**\n * Converts argument into a valid iterator.\n * Used internally on most array/object/collection methods that receives a\n * callback/iterator providing a shortcut syntax.\n */\n\n\nfunction makeIterator(src, thisObj) {\n  if (src == null) {\n    return identity;\n  }\n\n  switch (typeof src) {\n    case 'function':\n      // function is the first to improve perf (most common case)\n      // also avoid using `Function#call` if not needed, which boosts\n      // perf a lot in some cases\n      return typeof thisObj !== 'undefined' ? function (val, i, arr) {\n        return src.call(thisObj, val, i, arr);\n      } : src;\n\n    case 'object':\n      return function (val) {\n        return deepMatches(val, src);\n      };\n\n    case 'string':\n    case 'number':\n      return prop(src);\n  }\n}\n\nmodule.exports = makeIterator;","map":null,"metadata":{},"sourceType":"script"}