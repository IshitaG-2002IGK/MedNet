{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\MedNet_App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\MedNet_App\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport LanguageCode from 'iso-639-1-zh';\nimport CountryCode from 'iso-3166-1-alpha-2';\nvar REG = /^([a-z]{2})-([A-Z]{2})$/;\n\nvar LocaleCode = /*#__PURE__*/function () {\n  function LocaleCode() {\n    _classCallCheck(this, LocaleCode);\n  }\n\n  _createClass(LocaleCode, null, [{\n    key: \"getLanguageCode\",\n\n    /* language iso-639-1 */\n    value: function getLanguageCode(code) {\n      var match = code.match(REG);\n      if (!match || match.length < 1) return '';\n      return match[1];\n    }\n  }, {\n    key: \"getLanguageName\",\n    value: function getLanguageName(code) {\n      var languageCode = LocaleCode.getLanguageCode(code);\n      return LanguageCode.getName(languageCode);\n    }\n  }, {\n    key: \"getLanguageNativeName\",\n    value: function getLanguageNativeName(code) {\n      var languageCode = LocaleCode.getLanguageCode(code);\n      return LanguageCode.getNativeName(languageCode);\n    }\n  }, {\n    key: \"getLanguageZhName\",\n    value: function getLanguageZhName(code) {\n      var languageCode = LocaleCode.getLanguageCode(code);\n      return LanguageCode.getZhName(languageCode);\n    }\n  }, {\n    key: \"validateLanguageCode\",\n    value: function validateLanguageCode(code) {\n      var languageCode = LocaleCode.getLanguageCode(code);\n      return LanguageCode.validate(languageCode);\n    }\n  }, {\n    key: \"getLanguages\",\n    value: function getLanguages(codes) {\n      var list = [];\n\n      for (var i = 0; i < codes.length; i++) {\n        list.push({\n          code: codes[i],\n          name: LocaleCode.getLanguageName(codes[i]),\n          nativeName: LocaleCode.getLanguageNativeName(codes[i]),\n          zhName: LocaleCode.getLanguageZhName(codes[i])\n        });\n      }\n\n      return list;\n    }\n    /* country iso-3166-1-alpha-2 */\n\n  }, {\n    key: \"getCountryCode\",\n    value: function getCountryCode(code) {\n      var match = code.match(REG);\n      if (!match || match.length < 2) return '';\n      return match[2];\n    }\n  }, {\n    key: \"getCountryName\",\n    value: function getCountryName(code) {\n      var countryCode = LocaleCode.getCountryCode(code);\n      return CountryCode.getCountry(countryCode);\n    }\n  }, {\n    key: \"validateCountryCode\",\n    value: function validateCountryCode(code) {\n      code = LocaleCode.getCountryCode(code);\n\n      if (CountryCode.getCodes().indexOf(code) === -1) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n    /* validate */\n\n  }, {\n    key: \"validate\",\n    value: function validate(code) {\n      var match = code.match(REG);\n\n      if (match && match.length === 3 && LocaleCode.validateLanguageCode(code) && LocaleCode.validateCountryCode(code)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return LocaleCode;\n}();\n\nexport { LocaleCode as default };","map":null,"metadata":{},"sourceType":"module"}