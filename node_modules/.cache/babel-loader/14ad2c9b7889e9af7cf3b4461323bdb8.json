{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeToken = exports.validateToken = exports.fetchToken = exports.minTokenValidTime = void 0;\n\nvar base_64_1 = require(\"base-64\");\n\nexports.minTokenValidTime = 60 * 60 * 1000; // 1 hour\n\nfunction fetchToken(baseUrl, projectId, appId, deviceId) {\n  var fetcher = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : fetch;\n  var nowFn = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : Date.now;\n\n  var _a;\n\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var body, response, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (projectId !== undefined) {\n              body = {\n                projectId: projectId,\n                deviceId: deviceId\n              };\n            } else {\n              body = {\n                appId: appId,\n                deviceId: deviceId\n              };\n            }\n\n            _context.next = 3;\n            return fetcher(baseUrl, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(body)\n            });\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return response.json();\n\n          case 6:\n            json = _context.sent;\n\n            if (!(response.status !== 200)) {\n              _context.next = 9;\n              break;\n            }\n\n            throw Error((_a = json.error) !== null && _a !== void 0 ? _a : \"Speechly API login request failed with \".concat(response.status));\n\n          case 9:\n            if (!(json.access_token === undefined)) {\n              _context.next = 11;\n              break;\n            }\n\n            throw Error('Invalid login response from Speechly API');\n\n          case 11:\n            if (validateToken(json.access_token, projectId, appId, deviceId, nowFn)) {\n              _context.next = 13;\n              break;\n            }\n\n            throw Error('Invalid token received from Speechly API');\n\n          case 13:\n            return _context.abrupt(\"return\", json.access_token);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\n\nexports.fetchToken = fetchToken;\n\nfunction validateToken(token, projectId, appId, deviceId) {\n  var now = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Date.now;\n  var decoded = decodeToken(token);\n\n  if (decoded.expiresAtMs - now() < exports.minTokenValidTime) {\n    return false;\n  }\n\n  if (decoded.appId !== appId || decoded.projectId !== projectId) {\n    return false;\n  }\n\n  if (decoded.deviceId !== deviceId) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.validateToken = validateToken;\n\nfunction decodeToken(token) {\n  var b = token.split('.')[1];\n  var body;\n\n  try {\n    body = JSON.parse((0, base_64_1.decode)(b));\n  } catch (e) {\n    throw new Error('Error decoding Speechly token!');\n  }\n\n  return {\n    appId: body.appId,\n    projectId: body.projectId,\n    deviceId: body.deviceId,\n    configId: body.configId,\n    scopes: body.scope.split(' '),\n    issuer: body.iss,\n    audience: body.aud,\n    expiresAtMs: body.exp * 1000 // JWT exp is in seconds, convert to ms, since that's what JS works with.\n\n  };\n}\n\nexports.decodeToken = decodeToken;","map":null,"metadata":{},"sourceType":"script"}