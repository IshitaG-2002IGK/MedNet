{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WebWorkerController = void 0;\n\nvar types_1 = require(\"./types\");\n\nvar worker_1 = __importDefault(require(\"./worker\"));\n\nvar WebWorkerController = /*#__PURE__*/function () {\n  function WebWorkerController() {\n    var _this = this;\n\n    _classCallCheck(this, WebWorkerController);\n\n    this.startCbs = [];\n    this.stopCbs = [];\n\n    this.onResponseCb = function () {};\n\n    this.onCloseCb = function () {};\n\n    this.onWebsocketMessage = function (event) {\n      var response = event.data;\n\n      switch (response.type) {\n        case types_1.WebsocketResponseType.Opened:\n          if (_this.resolveInitialization != null) {\n            _this.resolveInitialization();\n          }\n\n          break;\n\n        case types_1.WebsocketResponseType.SourceSampleRateSetSuccess:\n          if (_this.resolveSourceSampleRateSet != null) {\n            _this.resolveSourceSampleRateSet();\n          }\n\n          break;\n\n        case types_1.WebsocketResponseType.Started:\n          _this.startCbs.forEach(function (cb) {\n            try {\n              cb(undefined, response.audio_context);\n            } catch (e) {\n              console.error('[SpeechlyClient] Error while invoking \"onStart\" callback:', e);\n            }\n          });\n\n          _this.startCbs.length = 0;\n          break;\n\n        case types_1.WebsocketResponseType.Stopped:\n          _this.stopCbs.forEach(function (cb) {\n            try {\n              cb(undefined, response.audio_context);\n            } catch (e) {\n              console.error('[SpeechlyClient] Error while invoking \"onStop\" callback:', e);\n            }\n          });\n\n          _this.stopCbs.length = 0;\n          break;\n\n        default:\n          _this.onResponseCb(response);\n\n      }\n    };\n\n    var blob = new Blob([worker_1.default], {\n      type: 'text/javascript'\n    });\n    var blobURL = window.URL.createObjectURL(blob);\n    this.worker = new Worker(blobURL);\n    this.worker.addEventListener('message', this.onWebsocketMessage);\n  }\n\n  _createClass(WebWorkerController, [{\n    key: \"onResponse\",\n    value: function onResponse(cb) {\n      this.onResponseCb = cb;\n    }\n  }, {\n    key: \"onClose\",\n    value: function onClose(cb) {\n      this.onCloseCb = cb;\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(apiUrl, authToken, targetSampleRate, debug) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.worker.postMessage({\n                  type: 'INIT',\n                  apiUrl: apiUrl,\n                  authToken: authToken,\n                  targetSampleRate: targetSampleRate,\n                  debug: debug\n                });\n                return _context.abrupt(\"return\", new Promise(function (resolve) {\n                  _this2.resolveInitialization = resolve;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"setSourceSampleRate\",\n    value: function setSourceSampleRate(sourceSampleRate) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.worker.postMessage({\n                  type: 'SET_SOURSE_SAMPLE_RATE',\n                  sourceSampleRate: sourceSampleRate\n                });\n                return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                  _this3.resolveSourceSampleRateSet = resolve;\n                }));\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this4.worker.postMessage({\n                    type: 'CLOSE',\n                    code: 1000,\n                    message: 'Client has ended the session'\n                  });\n\n                  resolve();\n                }));\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }, {\n    key: \"startContext\",\n    value: function startContext(appId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this5 = this;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this5.startCbs.push(function (err, id) {\n                    if (err !== undefined) {\n                      reject(err);\n                    } else {\n                      resolve(id);\n                    }\n                  });\n\n                  if (appId != null) {\n                    _this5.worker.postMessage({\n                      type: 'START_CONTEXT',\n                      appId: appId\n                    });\n                  } else {\n                    _this5.worker.postMessage({\n                      type: 'START_CONTEXT'\n                    });\n                  }\n                }));\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n    }\n  }, {\n    key: \"stopContext\",\n    value: function stopContext() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this6 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this6.stopCbs.push(function (err, id) {\n                    if (err !== undefined) {\n                      reject(err);\n                    } else {\n                      resolve(id);\n                    }\n                  });\n\n                  _this6.worker.postMessage({\n                    type: 'STOP_CONTEXT'\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5);\n      }));\n    }\n  }, {\n    key: \"switchContext\",\n    value: function switchContext(appId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this7 = this;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this7.startCbs.push(function (err, id) {\n                    if (err !== undefined) {\n                      reject(err);\n                    } else {\n                      resolve(id);\n                    }\n                  });\n\n                  _this7.worker.postMessage({\n                    type: 'SWITCH_CONTEXT',\n                    appId: appId\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    }\n  }, {\n    key: \"postMessage\",\n    value: function postMessage(message) {\n      this.worker.postMessage(message);\n    }\n  }, {\n    key: \"sendAudio\",\n    value: function sendAudio(audioChunk) {\n      this.worker.postMessage({\n        type: 'AUDIO',\n        payload: audioChunk\n      });\n    }\n  }]);\n\n  return WebWorkerController;\n}();\n\nexports.WebWorkerController = WebWorkerController;","map":null,"metadata":{},"sourceType":"script"}