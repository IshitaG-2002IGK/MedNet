{"ast":null,"code":"var forOwn = require('./forOwn');\n\nvar isPlainObject = require('../lang/isPlainObject');\n/*\n * Helper function to flatten to a destination object.\n * Used to remove the need to create intermediate objects while flattening.\n */\n\n\nfunction flattenTo(obj, result, prefix, level) {\n  forOwn(obj, function (value, key) {\n    var nestedPrefix = prefix ? prefix + '.' + key : key;\n\n    if (level !== 0 && isPlainObject(value)) {\n      flattenTo(value, result, nestedPrefix, level - 1);\n    } else {\n      result[nestedPrefix] = value;\n    }\n  });\n  return result;\n}\n/**\n * Recursively flattens an object.\n * A new object containing all the elements is returned.\n * If level is specified, it will only flatten up to that level.\n */\n\n\nfunction flatten(obj, level) {\n  if (obj == null) {\n    return {};\n  }\n\n  level = level == null ? -1 : level;\n  return flattenTo(obj, {}, '', level);\n}\n\nmodule.exports = flatten;","map":null,"metadata":{},"sourceType":"script"}