{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\RajaJ\\\\OneDrive\\\\Desktop\\\\react-component-landing-page\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SegmentState = void 0;\n\nvar SegmentState = /*#__PURE__*/function () {\n  function SegmentState(ctxId, sId) {\n    _classCallCheck(this, SegmentState);\n\n    this.isFinalized = false;\n    this.words = [];\n    this.entities = new Map();\n    this.intent = {\n      intent: '',\n      isFinal: false\n    };\n    this.contextId = ctxId;\n    this.id = sId;\n  }\n\n  _createClass(SegmentState, [{\n    key: \"toSegment\",\n    value: function toSegment() {\n      var i = 0;\n      var entities = new Array(this.entities.size);\n      this.entities.forEach(function (v) {\n        entities[i] = v;\n        i++;\n      });\n      return {\n        id: this.id,\n        contextId: this.contextId,\n        isFinal: this.isFinalized,\n        words: this.words,\n        entities: entities,\n        intent: this.intent\n      };\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var segment = this.toSegment();\n      var words = segment.words.filter(function (w) {\n        return w.value;\n      }).map(function (w) {\n        return {\n          value: w.value,\n          index: w.index\n        };\n      });\n      var cleanSegment = Object.assign(Object.assign({}, segment), {\n        words: words\n      });\n      return JSON.stringify(cleanSegment, null, 2);\n    }\n  }, {\n    key: \"updateTranscript\",\n    value: function updateTranscript(words) {\n      var _this = this;\n\n      words.forEach(function (w) {\n        // Only accept tentative words if the segment is tentative.\n        if (!_this.isFinalized || w.isFinal) {\n          _this.words[w.index] = w;\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"updateEntities\",\n    value: function updateEntities(entities) {\n      var _this2 = this;\n\n      entities.forEach(function (e) {\n        // Only accept tentative entities if the segment is tentative.\n        if (!_this2.isFinalized || e.isFinal) {\n          _this2.entities.set(entityMapKey(e), e);\n        }\n      });\n      return this;\n    }\n  }, {\n    key: \"updateIntent\",\n    value: function updateIntent(intent) {\n      // Only accept tentative intent if the segment is tentative.\n      if (!this.isFinalized || intent.isFinal) {\n        this.intent = intent;\n      }\n\n      return this;\n    }\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _this3 = this;\n\n      // Filter away any entities which were not finalized.\n      this.entities.forEach(function (val, key) {\n        if (!val.isFinal) {\n          _this3.entities.delete(key);\n        }\n      }); // Filter away any transcripts which were not finalized.\n\n      this.words = this.words.filter(function (w) {\n        return w.isFinal;\n      });\n\n      if (!this.intent.isFinal) {\n        this.intent.intent = '';\n        this.intent.isFinal = true;\n      } // Mark as final.\n\n\n      this.isFinalized = true;\n      return this;\n    }\n  }]);\n\n  return SegmentState;\n}();\n\nexports.SegmentState = SegmentState;\n\nfunction entityMapKey(e) {\n  return \"\".concat(e.startPosition.toString(), \":\").concat(e.endPosition.toString());\n}","map":null,"metadata":{},"sourceType":"script"}