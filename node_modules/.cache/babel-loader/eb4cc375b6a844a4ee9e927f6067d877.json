{"ast":null,"code":"var hasOwn = require('./hasOwn');\n\nvar _hasDontEnumBug, _dontEnums;\n\nfunction checkDontEnum() {\n  _dontEnums = ['toString', 'toLocaleString', 'valueOf', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable', 'constructor'];\n  _hasDontEnumBug = true;\n\n  for (var key in {\n    'toString': null\n  }) {\n    _hasDontEnumBug = false;\n  }\n}\n/**\n * Similar to Array/forEach but works over object properties and fixes Don't\n * Enum bug on IE.\n * based on: http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation\n */\n\n\nfunction forIn(obj, fn, thisObj) {\n  var key,\n      i = 0; // no need to check if argument is a real object that way we can use\n  // it for arrays, functions, date, etc.\n  //post-pone check till needed\n\n  if (_hasDontEnumBug == null) checkDontEnum();\n\n  for (key in obj) {\n    if (exec(fn, obj, key, thisObj) === false) {\n      break;\n    }\n  }\n\n  if (_hasDontEnumBug) {\n    var ctor = obj.constructor,\n        isProto = !!ctor && obj === ctor.prototype;\n\n    while (key = _dontEnums[i++]) {\n      // For constructor, if it is a prototype object the constructor\n      // is always non-enumerable unless defined otherwise (and\n      // enumerated above).  For non-prototype objects, it will have\n      // to be defined on this object, since it cannot be defined on\n      // any prototype objects.\n      //\n      // For other [[DontEnum]] properties, check if the value is\n      // different than Object prototype value.\n      if ((key !== 'constructor' || !isProto && hasOwn(obj, key)) && obj[key] !== Object.prototype[key]) {\n        if (exec(fn, obj, key, thisObj) === false) {\n          break;\n        }\n      }\n    }\n  }\n}\n\nfunction exec(fn, obj, key, thisObj) {\n  return fn.call(thisObj, obj[key], key, obj);\n}\n\nmodule.exports = forIn;","map":null,"metadata":{},"sourceType":"script"}