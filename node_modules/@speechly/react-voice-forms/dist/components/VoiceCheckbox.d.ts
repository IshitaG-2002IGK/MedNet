/// <reference types="react" />
export declare type VoiceCheckboxProps = {
    /**
     * The label displayed on the component. For speech use, the label should match the keywords in the phrase used to control the widget:
     * e.g. component with label "Passengers" should be configured to react to phrases like "3 passegers"
     */
    label: string;
    /**
     * The current value. Specifying the value controls the components's state so it makes sense to provide an onChange handler.
     */
    value?: boolean;
    /**
     * Initial checked state. Has no effect if `value` is specified.
     */
    defaultValue?: boolean;
    /**
     * `string` (intent) filters out all but the specified intent.
     * `undefined` sets on any intent.
     */
    intent?: string;
    /**
     * `string` (intent) forces clearing values both on `setOnEntityType` and `clearOnEntityType`.
     */
    clearIntent?: string;
    /**
     * `string` (entity type) sets (checks) this widget if a matched entity type is found in the SpeechSegment.
     */
    setOnEntityType: string;
    /**
     * `string` (entity type) clears (unchecks) this widget if a matched entity type is found in the SpeechSegment.
     */
    clearOnEntityType?: string;
    /**
     * @private
     */
    focused?: boolean;
    /**
     * @param value The new value
     * Triggered upon GUI or voice manipulation of the widget.
     */
    onChange?: (value: boolean) => void;
    /**
     * @private
     */
    onBlur?: () => void;
    /**
     * @private
     */
    onFocus?: () => void;
    /**
     * @private
     */
    onFinal?: () => void;
};
export declare const VoiceCheckbox: ({ label, value, defaultValue, intent, clearIntent, setOnEntityType, clearOnEntityType, onChange, onFinal, onBlur, onFocus, focused }: VoiceCheckboxProps) => JSX.Element;
